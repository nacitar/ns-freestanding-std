// vim: set ft=cpp:
#ifndef NS_STD_LIMITS_
#define NS_STD_LIMITS_

#include <limits.h>
#include <float.h>
#include <ns/std/type_traits>

namespace NS_STD {

template <typename T>
struct numeric_limits {
  static constexpr bool is_specialized = false;
  static constexpr T min() noexcept { return T(); }
  static constexpr T max() noexcept { return T(); }
};

template <>
struct numeric_limits<bool> {
  static constexpr bool is_specialized = true;
  static constexpr bool min() noexcept { return false; }
  static constexpr bool max() noexcept { return true; }
};

template <>
struct numeric_limits<char> {
  static constexpr bool is_specialized = true;
  static constexpr char min() noexcept { return CHAR_MIN; }
  static constexpr char max() noexcept { return CHAR_MAX; }
};

template <>
struct numeric_limits<signed char> {
  static constexpr bool is_specialized = true;
  static constexpr signed char min() noexcept { return SCHAR_MIN; }
  static constexpr signed char max() noexcept { return SCHAR_MAX; }
};

template <>
struct numeric_limits<unsigned char> {
  static constexpr bool is_specialized = true;
  static constexpr unsigned char min() noexcept { return 0; }
  static constexpr unsigned char max() noexcept { return UCHAR_MAX; }
};

template <>
struct numeric_limits<short> {
  static constexpr bool is_specialized = true;
  static constexpr short min() noexcept { return SHRT_MIN; }
  static constexpr short max() noexcept { return SHRT_MAX; }
};

template <>
struct numeric_limits<unsigned short> {
  static constexpr bool is_specialized = true;
  static constexpr unsigned short min() noexcept { return 0; }
  static constexpr unsigned short max() noexcept { return USHRT_MAX; }
};

template <>
struct numeric_limits<int> {
  static constexpr bool is_specialized = true;
  static constexpr int min() noexcept { return INT_MIN; }
  static constexpr int max() noexcept { return INT_MAX; }
};

template <>
struct numeric_limits<unsigned int> {
  static constexpr bool is_specialized = true;
  static constexpr unsigned int min() noexcept { return 0; }
  static constexpr unsigned int max() noexcept { return UINT_MAX; }
};

template <>
struct numeric_limits<long> {
  static constexpr bool is_specialized = true;
  static constexpr long min() noexcept { return LONG_MIN; }
  static constexpr long max() noexcept { return LONG_MAX; }
};

template <>
struct numeric_limits<unsigned long> {
  static constexpr bool is_specialized = true;
  static constexpr unsigned long min() noexcept { return 0; }
  static constexpr unsigned long max() noexcept { return ULONG_MAX; }
};

template <>
struct numeric_limits<long long> {
  static constexpr bool is_specialized = true;
  static constexpr long long min() noexcept { return LLONG_MIN; }
  static constexpr long long max() noexcept { return LLONG_MAX; }
};

template <>
struct numeric_limits<unsigned long long> {
  static constexpr bool is_specialized = true;
  static constexpr unsigned long long min() noexcept { return 0; }
  static constexpr unsigned long long max() noexcept { return ULLONG_MAX; }
};

template <>
struct numeric_limits<float> {
  static constexpr bool is_specialized = true;
  static constexpr float min() noexcept { return FLT_MIN; }
  static constexpr float max() noexcept { return FLT_MAX; }
  static constexpr float lowest() noexcept { return -FLT_MAX; }
  static constexpr float epsilon() noexcept { return FLT_EPSILON; }
  static constexpr float round_error() noexcept { return 0.5F; }
  static constexpr float infinity() noexcept { return INFINITY; }
  static constexpr float quiet_NaN() noexcept { return NAN; }
  static constexpr float signaling_NaN() noexcept { return NAN; }
  static constexpr float denorm_min() noexcept { return FLT_MIN; }
};

template <>
struct numeric_limits<double> {
  static constexpr bool is_specialized = true;
  
  static constexpr double min() noexcept { return DBL_MIN; }
  static constexpr double max() noexcept { return DBL_MAX; }
  static constexpr double lowest() noexcept { return -DBL_MAX; }
  static constexpr double epsilon() noexcept { return DBL_EPSILON; }
  static constexpr double round_error() noexcept { return 0.5; }
  static constexpr int digits = DBL_MANT_DIG;
  static constexpr int digits10 = DBL_DIG;
  static constexpr int max_exponent = DBL_MAX_EXP;
  static constexpr int min_exponent = DBL_MIN_EXP;
  static constexpr int max_exponent10 = DBL_MAX_10_EXP;
  static constexpr int min_exponent10 = DBL_MIN_10_EXP;

  static constexpr bool is_signed = true;
  static constexpr bool is_integer = false;
  static constexpr bool is_exact = false;
  static constexpr bool has_infinity = true;
  static constexpr bool has_quiet_NaN = true;
  static constexpr bool has_signaling_NaN = true;
  static constexpr std::float_denorm_style has_denorm = std::denorm_indeterminate;
  static constexpr bool has_denorm_loss = false;
  static constexpr double infinity() noexcept { return INFINITY; }
  static constexpr double quiet_NaN() noexcept { return NAN; }
  static constexpr double signaling_NaN() noexcept { return NAN; }
  static constexpr double denorm_min() noexcept { return DBL_MIN; }
};

template <>
struct numeric_limits<long double> {
  static constexpr bool is_specialized = true;
  
  static constexpr long double min() noexcept { return LDBL_MIN; }
  static constexpr long double max() noexcept { return LDBL_MAX; }
  static constexpr long double lowest() noexcept { return -LDBL_MAX; }
  static constexpr long double epsilon() noexcept { return LDBL_EPSILON; }
  static constexpr long double round_error() noexcept { return 0.5L; }
  static constexpr int digits = LDBL_MANT_DIG;
  static constexpr int digits10 = LDBL_DIG;
  static constexpr int max_exponent = LDBL_MAX_EXP;
  static constexpr int min_exponent = LDBL_MIN_EXP;
  static constexpr int max_exponent10 = LDBL_MAX_10_EXP;
  static constexpr int min_exponent10 = LDBL_MIN_10_EXP;

  static constexpr bool is_signed = true;
  static constexpr bool is_integer = false;
  static constexpr bool is_exact = false;
  static constexpr bool has_infinity = true;
  static constexpr bool has_quiet_NaN = true;
  static constexpr bool has_signaling_NaN = true;
  static constexpr std::float_denorm_style has_denorm = std::denorm_indeterminate;
  static constexpr bool has_denorm_loss = false;
  static constexpr long double infinity() noexcept { return INFINITY; }
  static constexpr long double quiet_NaN() noexcept { return NAN; }
  static constexpr long double signaling_NaN() noexcept { return NAN; }
  static constexpr long double denorm_min() noexcept { return LDBL_MIN; }
};

}  // namespace NS_STD

#endif  // NS_STD_LIMITS_
