// vim: set ft=cpp:
#ifndef NS_STD_TYPE_TRAITS_
#define NS_STD_TYPE_TRAITS_
// [meta.type.synop]/20.15.3 (C++20): Provides <type_traits> synopsys.
// Links to descriptions of the is_* traits within comments.
// [meta.rqmts]/20.15.2 (C++20): Requirements for traits.

#include <ns/std/features.hxx>
#include <ns/std/cstddef>

namespace NS_STD {

// In the order specified by the standard, but with fundamental traits
// specified higher to satisfy compilation.

// Fundamental traits; 



// [meta.help]/20.15.4 (C++20): Provides integral_constant.
template<class T, T v>
struct integral_constant {
    static constexpr T value = v;
    using value_type = T;
    using type = integral_constant<T, v>;
    constexpr operator value_type() const noexcept { return value; }
    constexpr value_type operator()() const noexcept { return value; }
};
template <bool B>
using bool_constant = integral_constant<bool, B>;
using true_type = bool_constant<true>;
using false_type = bool_constant<false>;

template <class T, class U>
struct is_same : false_type {};
template <class T>
struct is_same<T, T> : true_type {};
template <class T, class U>
constexpr bool is_same_v = is_same<T, U>::value;

template <class T>
struct remove_const { using type = T; };
template <class T>
struct remove_const<const T> { using type = T; };
template <class T>
using remove_const_t = typename remove_const<T>::type;

template <class T>
struct remove_volatile { using type = T; };
template <class T>
struct remove_volatile<volatile T> { using type = T; };
template <class T>
using remove_volatile_t = typename remove_volatile<T>::type;

template <class T>
struct remove_cv { using type = remove_const_t<remove_volatile_t<T>>; };
template <class T>
using remove_cv_t = typename remove_cv<T>::type;

// primary template
template<class>
struct is_function : false_type {};
 
// specialization for regular functions
template<class Ret, class... Args>
struct is_function<Ret(Args...)> : true_type {};
 
// specialization for variadic functions such as printf
template<class Ret, class... Args>
struct is_function<Ret(Args......)> : true_type {};
 
// specialization for function types that have cv-qualifiers
template<class Ret, class... Args>
struct is_function<Ret(Args...) const> : true_type {};
template<class Ret, class... Args>
struct is_function<Ret(Args...) volatile> : true_type {};
template<class Ret, class... Args>
struct is_function<Ret(Args...) const volatile> : true_type {};
template<class Ret, class... Args>
struct is_function<Ret(Args......) const> : true_type {};
template<class Ret, class... Args>
struct is_function<Ret(Args......) volatile> : true_type {};
template<class Ret, class... Args>
struct is_function<Ret(Args......) const volatile> : true_type {};
 
// specialization for function types that have ref-qualifiers
template<class Ret, class... Args>
struct is_function<Ret(Args...) &> : true_type {};
template<class Ret, class... Args>
struct is_function<Ret(Args...) const &> : true_type {};
template<class Ret, class... Args>
struct is_function<Ret(Args...) volatile &> : true_type {};
template<class Ret, class... Args>
struct is_function<Ret(Args...) const volatile &> : true_type {};
template<class Ret, class... Args>
struct is_function<Ret(Args......) &> : true_type {};
template<class Ret, class... Args>
struct is_function<Ret(Args......) const &> : true_type {};
template<class Ret, class... Args>
struct is_function<Ret(Args......) volatile &> : true_type {};
template<class Ret, class... Args>
struct is_function<Ret(Args......) const volatile &> : true_type {};
template<class Ret, class... Args>
struct is_function<Ret(Args...) &&> : true_type {};
template<class Ret, class... Args>
struct is_function<Ret(Args...) const &&> : true_type {};
template<class Ret, class... Args>
struct is_function<Ret(Args...) volatile &&> : true_type {};
template<class Ret, class... Args>
struct is_function<Ret(Args...) const volatile &&> : true_type {};
template<class Ret, class... Args>
struct is_function<Ret(Args......) &&> : true_type {};
template<class Ret, class... Args>
struct is_function<Ret(Args......) const &&> : true_type {};
template<class Ret, class... Args>
struct is_function<Ret(Args......) volatile &&> : true_type {};
template<class Ret, class... Args>
struct is_function<Ret(Args......) const volatile &&> : true_type {};
 
// specializations for noexcept versions of all the above (C++17 and later)
template<class Ret, class... Args>
struct is_function<Ret(Args...) noexcept> : true_type {};
template<class Ret, class... Args>
struct is_function<Ret(Args......) noexcept> : true_type {};
template<class Ret, class... Args>
struct is_function<Ret(Args...) const noexcept> : true_type {};
template<class Ret, class... Args>
struct is_function<Ret(Args...) volatile noexcept> : true_type {};
template<class Ret, class... Args>
struct is_function<Ret(Args...) const volatile noexcept> : true_type {};
template<class Ret, class... Args>
struct is_function<Ret(Args......) const noexcept> : true_type {};
template<class Ret, class... Args>
struct is_function<Ret(Args......) volatile noexcept> : true_type {};
template<class Ret, class... Args>
struct is_function<Ret(Args......) const volatile noexcept> : true_type {};
template<class Ret, class... Args>
struct is_function<Ret(Args...) & noexcept> : true_type {};
template<class Ret, class... Args>
struct is_function<Ret(Args...) const & noexcept> : true_type {};
template<class Ret, class... Args>
struct is_function<Ret(Args...) volatile & noexcept> : true_type {};
template<class Ret, class... Args>
struct is_function<Ret(Args...) const volatile & noexcept> : true_type {};
template<class Ret, class... Args>
struct is_function<Ret(Args......) & noexcept> : true_type {};
template<class Ret, class... Args>
struct is_function<Ret(Args......) const & noexcept> : true_type {};
template<class Ret, class... Args>
struct is_function<Ret(Args......) volatile & noexcept> : true_type {};
template<class Ret, class... Args>
struct is_function<Ret(Args......) const volatile & noexcept> : true_type {};
template<class Ret, class... Args>
struct is_function<Ret(Args...) && noexcept> : true_type {};
template<class Ret, class... Args>
struct is_function<Ret(Args...) const && noexcept> : true_type {};
template<class Ret, class... Args>
struct is_function<Ret(Args...) volatile && noexcept> : true_type {};
template<class Ret, class... Args>
struct is_function<Ret(Args...) const volatile && noexcept> : true_type {};
template<class Ret, class... Args>
struct is_function<Ret(Args......) && noexcept> : true_type {};
template<class Ret, class... Args>
struct is_function<Ret(Args......) const && noexcept> : true_type {};
template<class Ret, class... Args>
struct is_function<Ret(Args......) volatile && noexcept> : true_type {};
template<class Ret, class... Args>
struct is_function<Ret(Args......) const volatile && noexcept> : true_type {};

template <class T>
constexpr bool is_function_v = is_function<T>::value;
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

template <class T>
struct is_void : is_same<void, remove_cv_t<T>>::type {};
template <class T>
inline constexpr bool is_void_v = is_void<T>::value;

template <class T>
struct is_null_pointer : is_same<nullptr_t, remove_cv_t<T>>::type {};
template <class T>
inline constexpr bool is_null_pointer_v = is_null_pointer<T>::value;

// is_integral
template <class T>
struct is_integral : false_type {};
template <> struct is_integral<bool> : true_type {};
template <> struct is_integral<char> : true_type {};
template <> struct is_integral<signed char> : true_type {};
template <> struct is_integral<unsigned char> : true_type {};
#ifdef __cpp_char8_t
template <> struct is_integral<char8_t> : true_type {};
#endif
// TODO: __cpp_unicode_characters
template <> struct is_integral<char16_t> : true_type {};
template <> struct is_integral<char32_t> : true_type {};
template <> struct is_integral<wchar_t> : true_type {};
template <> struct is_integral<short> : true_type {};
template <> struct is_integral<unsigned short> : true_type {};
template <> struct is_integral<int> : true_type {};
template <> struct is_integral<unsigned int> : true_type {};
template <> struct is_integral<long> : true_type {};
template <> struct is_integral<unsigned long> : true_type {};
template <> struct is_integral<long long> : true_type {};
template <> struct is_integral<unsigned long long> : true_type {};
template <class T>
constexpr bool is_integral_v = is_integral<T>::value;

// is_floating_point
template <class T>
struct is_floating_point : false_type {};
template <> struct is_floating_point<float> : true_type {};
template <> struct is_floating_point<double> : true_type {};
template <> struct is_floating_point<long double> : true_type {};
template <class T>
constexpr bool is_floating_point_v = is_floating_point<T>::value;

// is_array  TODO specialization is weird?
template <class T>
struct is_array : false_type {};
template <class T> struct is_array<T[]> : true_type {};
template <class T, size_t N> struct is_array<T[N]> : true_type {};
template <class T>
constexpr bool is_array_v = is_array<T>::value;

// is_pointer  TODO: no helper
template <class T> struct is_pointer_helper : false_type {};
template <class T> struct is_pointer_helper<T*> : true_type {};
template <class T>
struct is_pointer : is_pointer_helper<remove_cv_t<T>>::type {};
template <class T>
constexpr bool is_pointer_v = is_pointer<T>::value;

// is_lvalue_reference
template <class T>
struct is_lvalue_reference : false_type {};
template <class T>
struct is_lvalue_reference<T&> : true_type {};
template <class T>
constexpr bool is_lvalue_reference_v = is_lvalue_reference<T>::value;

// is_rvalue_reference
template <class T>
struct is_rvalue_reference : false_type {};
template <class T>
struct is_rvalue_reference<T&&> : true_type {};
template <class T>
constexpr bool is_rvalue_reference_v = is_rvalue_reference<T>::value;

// TODO: is_member_object_pointer
// TODO: is_member_function_pointer REMOVE HELPER
template<class T>
struct is_member_function_pointer_helper : false_type {};
template<class T, class U>
struct is_member_function_pointer_helper<T U::*> : is_function<T> {};
template<class T>
struct is_member_function_pointer 
    : is_member_function_pointer_helper<typename remove_cv<T>::type> {};

/*
template <class T>
inline constexpr bool is_member_object_pointer_v =
        is_member_object_pointer<T>::value;
template <class T>
inline constexpr bool is_member_function_pointer_v =
        is_member_function_pointer<T>::value;
*/

//////////////////////////
/////////////// INTRINSICS
// NOTE: compiler intrinsic!

#ifdef NS_STD_FEATURE_HAS_IS_ENUM_INTRINSIC
template <class T>
struct is_enum : bool_constant<__is_enum(T)> {};
template <class T>
inline constexpr bool is_enum_v = is_enum<T>::value;
#else
#warning is_enum cannot be defined
#endif  // NS_STD_FEATURE_HAS_IS_ENUM_INTRINSIC

#ifdef NS_STD_FEATURE_HAS_IS_UNION_INTRINSIC
template <class T>
struct is_union : bool_constant<__is_union(T)> {};
template <class T>
inline constexpr bool is_union_v = is_union<T>::value;
#else
#warning is_union cannot be defined
#endif  // NS_STD_FEATURE_HAS_IS_UNION_INTRINSIC

#ifdef NS_STD_FEATURE_HAS_IS_CLASS_INTRINSIC
template <class T>
struct is_class : bool_constant<__is_class(T)> {};
template <class T>
inline constexpr bool is_class_v = is_class<T>::value;
#else
#warning is_class cannot be defined
#endif  // NS_STD_FEATURE_HAS_IS_CLASS_INTRINSIC

//////////////////////////



// is_reference
template <class T>
struct is_reference : false_type {};
template <class T>
struct is_reference<T&> : true_type {};
template <class T>
struct is_reference<T&&> : true_type {};
template <class T>
constexpr bool is_reference_v = is_reference<T>::value;

// TODO: is_arithmetic
// TODO: is_fundamental
// TODO: is_object
// TODO: is_scalar
// TODO: is_compound


// is_member_pointer
// TODO: remove helper?  is the remove_cv even needed?
template<class T>
struct is_member_pointer_helper : false_type {};
template<class T, class U>
struct is_member_pointer_helper<T U::*> : true_type {};
template<class T>
struct is_member_pointer
: is_member_pointer_helper<typename remove_cv<T>::type> {};
template <class T>
constexpr bool is_member_pointer_v = is_member_pointer<T>::value;



///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////


// remove_reference
template <class T>
struct remove_reference { using type = T; };
template <class T>
struct remove_reference<T&> { using type = T; };
template <class T>
struct remove_reference<T&&> { using type = T; };
template <class T>
using remove_reference_t = class remove_reference<T>::type;

// Helper type alias to remove const, volatile, and reference qualifiers
template<class T>
using remove_cvref_t = remove_cv_t<remove_reference_t<T>>;

// is_signed  TODO: best way?
template <class T>
struct is_signed : bool_constant<(T(-1) < T(0))> {};
template <class T>
constexpr bool is_signed_v = is_signed<T>::value;

// is_unsigned  TODO: best way?
template <class T>
struct is_unsigned : bool_constant<(T(-1) > T(0))> {};
template <class T>
constexpr bool is_unsigned_v = is_unsigned<T>::value;

// remove_pointer TODO: simplify with remove_cv?
template <class T>
struct remove_pointer { using type = T; };
template <class T>
struct remove_pointer<T*> { using type = T; };
template <class T>
struct remove_pointer<T* const> { using type = T; };
template <class T>
struct remove_pointer<T* volatile> { using type = T; };
template <class T>
struct remove_pointer<T* const volatile> { using type = T; };
template <class T>
using remove_pointer_t = class remove_pointer<T>::type;

// add_pointer
template <class T>
struct add_pointer {
    using type = remove_reference_t<T>*;
};
template <class T>
using add_pointer_t = typename add_pointer<T>::type;

// add_lvalue_reference
template <class T>
struct add_lvalue_reference {
    using type = T&;
};
template <>
struct add_lvalue_reference<void> {
    using type = void;
};
template <class T>
using add_lvalue_reference_t = typename add_lvalue_reference<T>::type;

// add_rvalue_reference
template <class T>
struct add_rvalue_reference {
    using type = T&&;
};
template <>
struct add_rvalue_reference<void> {
    using type = void;
};
template <class T>
using add_rvalue_reference_t = typename add_rvalue_reference<T>::type;

// remove_extent
template <class T>
struct remove_extent {
    using type = T;
};
template <class T>
struct remove_extent<T[]> {
    using type = T;
};
template <class T, size_t N>
struct remove_extent<T[N]> {
    using type = T;
};
template <class T>
using remove_extent_t = typename remove_extent<T>::type;

// remove_all_extents
template <class T>
struct remove_all_extents {
    using type = T;
};
template <class T>
struct remove_all_extents<T[]> {
    using type = typename remove_all_extents<T>::type;
};
template <class T, size_t N>
struct remove_all_extents<T[N]> {
    using type = typename remove_all_extents<T>::type;
};
template <class T>
using remove_all_extents_t = typename remove_all_extents<T>::type;

}  // namespace NS_STD

#endif  // NS_STD_TYPE_TRAITS_
