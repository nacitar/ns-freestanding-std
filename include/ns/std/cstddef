// vim: set ft=cpp:
// Current status: COMPLETE
#ifndef NS_STD_CSTDDEF_
#define NS_STD_CSTDDEF_
// [cstddef.syn]/17.2.1 (C++20): Provides <cstddef> synopsys.

#include <ns/std/ns-std-detail/_core.hxx>
#include <stddef.h>  // NULL, offsetof(), ::ptrdiff_t, ::size_t, ::max_align_t

namespace NS_STD {

using ptrdiff_t = ::ptrdiff_t;
using size_t = ::size_t;
using max_align_t = ::max_align_t;
using nullptr_t = decltype(nullptr);

enum class byte : unsigned char {};
// [support.types.byteops]/17.2.5 (C++20): Provides byte operators.
template <integral IntType>
constexpr byte operator<<(byte b, IntType shift) noexcept {
    return byte(static_cast<unsigned int>(b) << shift);
}
template <integral IntType>
constexpr byte& operator<<=(byte& b, IntType shift) noexcept {
    return b = b << shift;
}
template <integral IntType>
constexpr byte operator>>(byte b, IntType shift) noexcept {
    return byte(static_cast<unsigned int>(b) >> shift);
}
template <integral IntType>
constexpr byte& operator>>=(byte& b, IntType shift) noexcept {
    return b = b >> shift;
}
constexpr byte operator|(byte l, byte r) noexcept {
    return byte(static_cast<unsigned int>(l) | static_cast<unsigned int>(r));
}
constexpr byte& operator|=(byte& l, byte r) noexcept {
    return l = l | r;
}
constexpr byte operator&(byte l, byte r) noexcept {
    return byte(static_cast<unsigned int>(l) & static_cast<unsigned int>(r));
}
constexpr byte& operator&=(byte& l, byte r) noexcept {
    return l = l & r;
}
constexpr byte operator^(byte l, byte r) noexcept {
    return byte(static_cast<unsigned int>(l) ^ static_cast<unsigned int>(r));
}
constexpr byte& operator^=(byte& l, byte r) noexcept {
    return l = l ^ r;
}
constexpr byte operator~(byte b) noexcept {
    return byte(~static_cast<unsigned int>(b));
}
template <integral IntType>
constexpr IntType to_integer(byte b) noexcept {
    return static_cast<IntType>(b);
}

} // namespace NS_STD

#endif  // NS_STD_CSTDDEF_
